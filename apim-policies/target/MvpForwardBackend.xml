<!-- This file is generated by the Azure API Management Policy Toolkit -->
<!-- Version: 1.0.0.0 -->
<policies>
  <inbound>
    <base />
    <choose>
      <when condition="@(context.Request.Method.Equals("GET"))">
        <cache-lookup-value key="@(Regex.Match(context.Request.OriginalUrl.ToString(), @"/job/(\d+)").Groups[1].Value)" variable-name="cachedResponse" caching-type="internal" />
        <choose>
          <when condition="@(context.Variables.ContainsKey("cachedResponse"))">
            <set-backend-service base-url="@((string)context.Variables["cachedResponse"])" />
          </when>
        </choose>
      </when>
      <otherwise>
        <set-backend-service backend-id="apim-rt-pool" />
      </otherwise>
    </choose>
  </inbound>
  <backend>
    <forward-request />
  </backend>
  <outbound>
    <base />
    <choose>
      <when condition="@(!context.Request.Method.Equals("GET"))">
        <cache-store-value key="@(Regex.Match(context.Response.Headers.GetValueOrDefault("operation-location", ""), @"/job/(\d+)", RegexOptions.IgnoreCase).Groups[1].Value)" value="@{
var opLoc = context.Response.Headers.GetValueOrDefault("operation-location", "");
return Regex.Replace(opLoc, @"/job/\d+.*$", string.Empty, RegexOptions.IgnoreCase);
}" duration="1200" caching-type="internal" />
      </when>
    </choose>
    <set-header name="operation-location" exists-action="override">
      <value>@{
var op = context.Response.Headers.GetValueOrDefault("operation-location", "");
if (!string.IsNullOrEmpty(op))
{
    return string.Concat("https://policy-testing.azure-api.net/api/v1", Regex.Match(op, @"/job/\d+").Value);
}
else
{
    return string.Concat("https://policy-testing.azure-api.net/api/v1/job/", (string)context.Variables["cachedResponse"]);
}
}</value>
    </set-header>
  </outbound>
  <on-error>
    <base />
    <set-header name="X-Error" exists-action="override">
      <value>An error occurred in the API pipeline TRACE for more information</value>
    </set-header>
  </on-error>
</policies>